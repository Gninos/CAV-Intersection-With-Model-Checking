/* Intersection with 04 CAVs
 0 = street cell, 1 = sidewalk cell, <>1 = vehicle cell
*/

/* Constants */
const xf : nat is 7 /* final index for coordinate x */
const yf : nat is 7 /* final index for coordinate x */
const f  : nat is 2 /* sidewalk size = width occupied by number 1 in matrix a */
const p  : nat is 4 /* number of lanes on each road in grid */
const n  : nat is 4 /* number of cars on the grid */

/* Types of variables that define the range of x and y positions*/
type posY is 0..yf
type posX is 0..xf 

/* Process: A car moving in a straight line can move forward in the same direction as it is or make diagonal movements. A car moving diagonally can move to any cell except returning to the previous cell, or make a sudden move at + 135 ° or -135 ° */

process play is
   states move, done
       
    var 
        /* Token "d" indicates which car had the chance to move last in the round.
        A round ends when all cars have had a chance to move.
          
        0 = initial state, 1..n are bound in order of priority. For example: 1 =
        first car to move in a round, n = last car to move in a round
        
        This order is implemented for the system to have the starvation-free property: the first car (d = 1) only moves if it is the first move of the control grid (d = 0) or after the last car (d = n) In walking, the second car (d = 2) only moves after the first car (d = 1) has walked, and so on.
        In this model, the orders were set manually, in the future a conditional selection will be added.*/
        
        d : 0..n  := 0, 
        
        /* token "out(n)" is binary: 
          true (1)  = carro n has left the grid
          false (0) = carro n is still on the grid*/

        out1, out2, out3, out4 : 0..1 :=0,  

       /* Tokens i, j, k e l update when vehicle "n" makes a move*/
       /* 0 = initial state;
          1 = when the car rides east  (x+);          northwest  north  northeast            
          2 = when the car rides west  (x-);                   \   ^   /
          3 = when the car rides south (y+);                    [0,0,0]    
          4 = when the car rides north (y-);            west  < [0,n,0] > east
          5 = when the car rides northwest (y-,x-);             [0,0,0]
          6 = when the car rides northeast (y-,x+);            /   v   \           
          7 = when the car rides southeast (y+,x-);   southwest  south   southeast
          8 = when the car rides southwest (y+,x+)*/
       
       i, j, k, l : 0..8   := 0, 
               
       
       /* Initial y and x positions of each car*/
       v1y  : posY :=1, v1x  : posX :=2, /* number 2 on the grid */
       v2y  : posY :=2, v2x  : posX :=1, /* number 3 on the grid */
       v3y  : posY :=0, v3x  : posX :=5, /* number 4 on the grid */
       v4y  : posY :=4, v4x  : posX :=0, /* number 5 on the grid */
       

             
                                      /* x-> 0-1-2-3-4-5-6-7*/
                                                 /* A */                /*y*/
       a : array 8 of array 8 of nat :=    [[1,1,0,0,0,4,1,1],          /*0*/
                                            [1,1,2,0,0,0,1,1],          /*1*/
                                            [0,3,0,0,0,0,0,0],          /*2*/ 
                                    /* B */ [0,0,0,0,0,0,0,0], /* C */  /*3*/
                                            [5,0,0,0,0,0,0,0],          /*4*/
                                            [0,0,0,0,0,0,0,0],          /*5*/
                                            [1,1,0,0,0,0,1,1],          /*6*/
                                            [1,1,0,0,0,0,1,1]]          /*7*/
                                                 /* D */ 

      
        

      from move
      select /* Todos os carros fora do grid*/
         on out1 = 1 and out2 = 1 and out3 = 1 and out4 = 1;
         v1x := 0; v1y := 0; v2x := 0; v2y := 0; v3x := 0; v3y := 0; v4x := 0; v4y := 0;
         d := 0; i := 0;  j := 0; k := 0; l := 0;
         to done
       

       /* ----------------------This transition avoids Deadlock----------------------------------*/
      /* When cars have no move option they wait and turn to the next */     
      
      [] on ((a[v3y][v3x] = 4 and a[v3y+1][v3x] <> 0 and (v3x+1 > xf-f or v3x-1 < f) and d = 2 and v3y < yf) and
            ((a[v2y][v2x] = 3 and a[v2y][v2x+1] = 0 and v2x <xf)
          or (a[v4y][v4x] = 5 and a[v4y][v4x+1] = 0 and v4x <xf)))

         or ((a[v3y][v3x] = 4 and a[v3y+1][v3x] <> 0 and (a[v3y+1][v3x+1] <> 0 and a[v3y+1][v3x-1] <> 0) and d = 2 and v3y < yf) and
            ((a[v2y][v2x] = 3 and a[v2y][v2x+1] = 0 and v2x <xf)
          or (a[v4y][v4x] = 5 and a[v4y][v4x+1] = 0 and v4x <xf)))
         
         or ((a[v2y][v2x] = 3 and a[v2y][v2x+1] <> 0 and (v2y+1 > yf-f or v2y-1 < f) and d = 1 and v2x < yf) and
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf)))

         or ((a[v2y][v2x] = 3 and a[v2y][v2x+1] <> 0 and (a[v2y+1][v2x+1] <> 0 and a[v2y-1][v2x+1] <> 0) and d = 1 and v2x < yf) and
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf)))
         
         or ((a[v4y][v4x] = 5 and a[v4y][v4x+1] <> 0 and (v4y+1 > yf-f or v4y-1 < f) and d = 3 and v4x < yf) and 
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf))) 

         or ((a[v4y][v4x] = 5 and a[v4y][v4x+1] <> 0 and (a[v4y+1][v4x+1] <> 0 and a[v4y-1][v4x+1] <> 0) and d = 3 and v4x < yf) and 
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf))); 

         d:=d+1;
         to move            
      
      /* Destinations where cars on the edge may leave the grid - No lane convergence*/

      [] on a[v1y][v1x] = 2 and v1y = yf-1 and (v1x = xf - f - p + 1 or v1x = xf - f - p + 2 or v1x = xf - f - p + 3 or v1x = xf - f - p + 4);
            a[v1y][v1x] := 0; out1:=1; to move
      [] on a[v3y][v3x] = 4 and v3y = yf-1 and (v3x = xf - f - p + 1 or v3x = xf - f - p + 2 or v3x = xf - f - p + 3 or v3x = xf - f - p + 4);
            a[v3y][v3x] := 0; out3:=1; to move
      [] on a[v2y][v2x] = 3 and v2x = xf-1 and (v2y = yf - f - p + 1 or v2y = yf - f - p + 2 or v2y = yf - f - p + 3 or v2y = yf - f - p + 4);
            a[v2y][v2x] := 0; out2:=1; to move
      [] on a[v4y][v4x] = 5 and v4x = xf-1 and (v4y = yf - f - p + 1 or v4y = yf - f - p + 2 or v4y = yf - f - p + 3 or v4y = yf - f - p + 4);
            a[v4y][v4x] := 0; out4:=1; to move
      
              
      /* Movements*/
      
      
     /* ---------------------------------------ROAD A----------------------------------------*/ 
     /* Cars on road A move south if y + 1 is empty and if previous move was south, southeast or southwest, and respects starvation-free property*/
      [] on a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y+1 < yf and (i = 0 or i = 3 or i = 7 or i = 8) and (d = 0 or d = 4 or out4 = 1);
            a[v1y+1][v1x]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; i:=3; d:=1;
            to move
     
      [] on a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y+1 < yf and (j = 0 or j = 3 or j = 7 or j = 8) and (d = 2 or out2 = 1);
            a[v3y+1][v3x]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; j:=3; d:=3;
            to move 
      
          
     /* Cars on road A move southwest if [y+1][x-1] is empty and if previous move is NOT coming north, east or northeast, if it is in the same lane, and respects starvation-free property */
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x-1]=0 and (v1x-1 > f-1 and v1y+1 < yf) and (i <> 1 or i <> 4 or i <> 6) and (d = 0 or d = 4 or out4 = 1);
            a[v1y+1][v1x-1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x-1; i:=7; d:=1;
            to move
      [] on a[v3y][v3x]=4 and a[v3y+1][v3x-1]=0 and (v3x-1 > f-1 and v3y+1 < yf) and (j <> 1 or j <> 4 or j <> 6) and (d = 2 or out2 = 1);
            a[v3y+1][v3x-1]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; v3x:=v3x-1; j:=7; d:=3;
            to move

     /* Cars on road A move southeast if [y+1][x+1] is empty and if previous move has NOT come north, west or northwest and respects starvation-free property*/
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x+1]=0 and (v1x+1 < xf-f+1 and v1y+1 < yf) and a[v1y+1][v1x] <> 0 and (i <> 2 or i <> 4 or i <> 5) and (d = 0 or d = 4 or out4 =1);
            a[v1y+1][v1x+1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x+1; i:=8; d:=1;
            to move
      [] on a[v3y][v3x]=4 and a[v3y+1][v3x+1]=0 and (v3x+1 < xf-f+1 and v3y+1 < yf) and a[v3y+1][v3x] <> 0 and (j <> 2 or j <> 4 or j <> 5) and (d = 2 or out2 = 1);
            a[v3y+1][v3x+1]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; v3x:=v3x+1; j:=8; d:=3;
            to move
     /* --------------------------------------ROAD B----------------------------------------*/
     
         
     /* Cars on road B move east if [x+1] is empty and if previous move was east, northeast or southeast, and respects starvation-free property*/
      [] on a[v2y][v2x]=3 and a[v2y][v2x+1]=0 and v2x+1 < xf and (k = 0 or k = 1 or k = 6 or k = 8) and (d = 1 or out1 = 1);
            a[v2y][v2x+1]:=3; a[v2y][v2x]:=0; v2x:=v2x+1; k:=1; d:=2;
            to move
      
      [] on a[v4y][v4x]=5 and a[v4y][v4x+1]=0 and v4x+1 < xf and (l = 0 or l = 1 or l = 6 or l = 8) and (d = 3 or out3 = 1);
            a[v4y][v4x+1]:=5; a[v4y][v4x]:=0; v4x:=v4x+1; l:=1; d:=4;
            to move 
         

     /* Cars on road B move northeast if [y-1][x+1] is empty and if previous movement does NOT come south, west or southwest, and respects starvation-free property */
      [] on a[v2y][v2x]=3 and a[v2y-1][v2x+1]=0 and (v2y-1 > f-1 and v2x+1 < xf) and (k <> 2 or k <> 3 or k <> 7) and (d = 1 or out1 = 1);
            a[v2y-1][v2x+1]:=3; a[v2y][v2x]:=0; v2y:=v2y-1; v2x:=v2x+1; k:=6; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y-1][v4x+1]=0 and (v4y-1 > f-1 and v4x+1 < xf) and (l <> 2 or l <> 3 or l <> 7) and (d = 3 or out3 = 1);
            a[v4y-1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y-1; v4x:=v4x+1; l:=6; d:=4;
            to move    

     
     /* Cars on road B move southeast if [y + 1] [x + 1] is empty and if previous movement did NOT come from south, east or southeast, and respects starvation-free property */
      [] on a[v2y][v2x]=3 and a[v2y+1][v2x+1]=0 and (v2y+1 < yf-f+1 and v2x+1 < xf) and (k <> 1 or k <> 3 or k <> 8) and (d = 1 or out1 = 1);
            a[v2y+1][v2x+1]:=3; a[v2y][v2x]:=0; v2y:=v2y+1; v2x:=v2x+1; k:=8; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y+1][v4x+1]=0 and (v4y+1 < yf-f+1 and v4x+1 < xf) and (l <> 1 or l <> 3 or l <> 8) and (d = 3 or out3 = 1);
            a[v4y+1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y+1; v4x:=v4x+1; l:=8; d:=4;
            to move     
      end
  


/* Entry point*/

play


/* Properties */


/* The model does not reach state "done"*/
property not_target is ltl ([] not (play/state done)) 
assert not_target
