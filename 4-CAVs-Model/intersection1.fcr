/* Cruzamento 04 veículos
 0 = célula com rua livre, 1 = célula com calçada, <>1 = célula com carro
*/

/* Constantes */
const xf : nat is 7 /* índice final em x na matriz a */
const yf : nat is 7 /* índice final em y na matriz a */
const f  : nat is 2 /* tamanho da calçada = largura ocupada pelo número 1 na matriz a */
const p  : nat is 4 /* número de pistas no grid */
const n  : nat is 4 /* número de carros no grid */

/* Tipos de variáveis que definem o alcançe das posições (y,x)*/
type posY is 0..yf
type posX is 0..xf 

/* Processo: Um carro "n" em linha reta pode andar para frente no mesmo sentido em que está ou fazer movimentos na diagonal. Um carro "n" em um movimento na diagonal pode se movimentar para qualquer célula, exceto retornar para a célula anterior, ou fazer um movimento brusco em +135° ou -135°

Os carros também podem andar duas células para frente se possível */

process play is
   states move, done
       
    var 
        /* Token "d" indica qual carro teve a chance de se movimentar por ultimo na rodada.
        Uma rodada acaba quando todos os carros tiveram a chance de se movimentar.
          
        0 = estado inicial, 1 .. n são vinculados em ordem de prioridade. Por exemplo: 1 =
        primeiro carro a se movimentar em uma rodada, n = último carro a se movimentar em uma rodada
        
        Essa ordem é implementada para o sistema ter a propriedade de starvation-free: o primeiro carro (d = 1) se movimentar se é o primeiro movimento do grid de controle (d = 0) ou após o último carro (d = n) andar, o segundo carro (d = 2) só se movimenta depois que o primeiro carro (d = 1) já andou e assim por diante.
        Neste modelo, as ordens foram definidas manualmente, futuramente será adicionado uma seleção condicional.*/
        
        d : 0..n  := 0, 
        
        /* o token "out(n)" é binário: 
          true (1)  = carro n saiu do grid
          false (0) = carro n ainda está no grid*/

        out1, out2, out3, out4 : 0..1 :=0,  

       /* os tokens i, j, k e l atualizam quando o veículo "n" faz um movimento*/
       /* 0 = estado inicial;
          1 = quando anda no sentido leste (x+);           noroeste  norte  nordeste            
          2 = quando anda no sentido oeste (x-);                   \   ^   /
          3 = quando anda no sentido sul   (y+);                    [0,0,0]    
          4 = quando anda no sentido norte (y-);            oeste < [0,n,0] > leste
          5 = quando anda na diagonal noroeste (y-,x-);             [0,0,0]
          6 = quando anda na diagonal nordeste (y-,x+);            /   v   \           
          7 = quando anda na diagonal sudoeste (y+,x-);    sudoeste   sul   sudeste
          8 = quando anda na diagonal sudeste  (y+,x+)*/
       
       i, j, k, l : 0..8   := 0, 
               
       
       /* Posições (y,x) iniciais de cada carro */
       v1y  : posY :=1, v1x  : posX :=2, /* número 2 no grid */
       v2y  : posY :=2, v2x  : posX :=1, /* número 3 no grid */
       v3y  : posY :=0, v3x  : posX :=5, /* número 4 no grid */
       v4y  : posY :=4, v4x  : posX :=0, /* número 5 no grid */
       

             
                                      /* x-> 0-1-2-3-4-5-6-7*/
                                                 /* A */                /*y*/
       a : array 8 of array 8 of nat :=    [[1,1,0,0,0,4,1,1],          /*0*/
                                            [1,1,2,0,0,0,1,1],          /*1*/
                                            [0,3,0,0,0,0,0,0],          /*2*/ 
                                    /* B */ [0,0,0,0,0,0,0,0], /* C */  /*3*/
                                            [5,0,0,0,0,0,0,0],          /*4*/
                                            [0,0,0,0,0,0,0,0],          /*5*/
                                            [1,1,0,0,0,0,1,1],          /*6*/
                                            [1,1,0,0,0,0,1,1]]          /*7*/
                                                 /* D */ 

      
        

      from move
      select /* Todos os carros fora do grid*/
         on out1 = 1 and out2 = 1 and out3 = 1 and out4 = 1;
         v1x := 0; v1y := 0; v2x := 0; v2y := 0; v3x := 0; v3y := 0; v4x := 0; v4y := 0;
         d := 0; i := 0;  j := 0; k := 0; l := 0;
         to done
       

       /* -----------------------------------EVITA DEADLOCK----------------------------------------*/
      /* Quando os carros não tem opção de movimento eles aguardam e dão a vez ao próximo */     
      
      [] on ((a[v3y][v3x] = 4 and a[v3y+1][v3x] <> 0 and (v3x+1 > xf-f or v3x-1 < f) and d = 2 and v3y < yf) and
            ((a[v2y][v2x] = 3 and a[v2y][v2x+1] = 0 and v2x <xf)
          or (a[v4y][v4x] = 5 and a[v4y][v4x+1] = 0 and v4x <xf)))

         or ((a[v3y][v3x] = 4 and a[v3y+1][v3x] <> 0 and (a[v3y+1][v3x+1] <> 0 and a[v3y+1][v3x-1] <> 0) and d = 2 and v3y < yf) and
            ((a[v2y][v2x] = 3 and a[v2y][v2x+1] = 0 and v2x <xf)
          or (a[v4y][v4x] = 5 and a[v4y][v4x+1] = 0 and v4x <xf)))
         
         or ((a[v2y][v2x] = 3 and a[v2y][v2x+1] <> 0 and (v2y+1 > yf-f or v2y-1 < f) and d = 1 and v2x < yf) and
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf)))

         or ((a[v2y][v2x] = 3 and a[v2y][v2x+1] <> 0 and (a[v2y+1][v2x+1] <> 0 and a[v2y-1][v2x+1] <> 0) and d = 1 and v2x < yf) and
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf)))
         
         or ((a[v4y][v4x] = 5 and a[v4y][v4x+1] <> 0 and (v4y+1 > yf-f or v4y-1 < f) and d = 3 and v4x < yf) and 
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf))) 

         or ((a[v4y][v4x] = 5 and a[v4y][v4x+1] <> 0 and (a[v4y+1][v4x+1] <> 0 and a[v4y-1][v4x+1] <> 0) and d = 3 and v4x < yf) and 
            ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <yf) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <yf))); 

         d:=d+1;
         to move            
      
      /* Destinos onde carros na borda podem sair do grid - Sem convergência de pista*/

      [] on a[v1y][v1x] = 2 and v1y = yf-1 and (v1x = xf - f - p + 1 or v1x = xf - f - p + 2 or v1x = xf - f - p + 3 or v1x = xf - f - p + 4);
            a[v1y][v1x] := 0; out1:=1; to move
      [] on a[v3y][v3x] = 4 and v3y = yf-1 and (v3x = xf - f - p + 1 or v3x = xf - f - p + 2 or v3x = xf - f - p + 3 or v3x = xf - f - p + 4);
            a[v3y][v3x] := 0; out3:=1; to move
      [] on a[v2y][v2x] = 3 and v2x = xf-1 and (v2y = yf - f - p + 1 or v2y = yf - f - p + 2 or v2y = yf - f - p + 3 or v2y = yf - f - p + 4);
            a[v2y][v2x] := 0; out2:=1; to move
      [] on a[v4y][v4x] = 5 and v4x = xf-1 and (v4y = yf - f - p + 1 or v4y = yf - f - p + 2 or v4y = yf - f - p + 3 or v4y = yf - f - p + 4);
            a[v4y][v4x] := 0; out4:=1; to move
      
              
      /* Movimentos*/
      
      
     /* ----------------------------------------- PISTA A----------------------------------------*/ 
     /* Carros na pista A se movem ao sul se y+1 ou y+2 está vazio e se movimento anterior foi no sentido sul, sudeste ou sudoeste, e se respeita a ordem de prioridade, e se está ao longo da sua pista*/
      [] on a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y+1 < yf and (i = 0 or i = 3 or i = 7 or i = 8) and (d = 0 or d = 4 or out4 = 1);
            a[v1y+1][v1x]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; i:=3; d:=1;
            to move
     
      [] on a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y+1 < yf and (j = 0 or j = 3 or j = 7 or j = 8) and (d = 2 or out2 = 1);
            a[v3y+1][v3x]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; j:=3; d:=3;
            to move 
      
          
     /* Carros na pista A se movem a sudoeste se [y+1][x-1] está vazio e se movimento anterior NÃO vem no sentido norte, leste ou nordeste, se está na mesma faixa e se respeita a ordem de prioridade*/
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x-1]=0 and (v1x-1 > f-1 and v1y+1 < yf) and (i <> 1 or i <> 4 or i <> 6) and (d = 0 or d = 4 or out4 = 1);
            a[v1y+1][v1x-1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x-1; i:=7; d:=1;
            to move
      [] on a[v3y][v3x]=4 and a[v3y+1][v3x-1]=0 and (v3x-1 > f-1 and v3y+1 < yf) and (j <> 1 or j <> 4 or j <> 6) and (d = 2 or out2 = 1);
            a[v3y+1][v3x-1]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; v3x:=v3x-1; j:=7; d:=3;
            to move

     /* Carros na pista A se movem a sudeste se [y+1][x+1] está vazio e se movimento anterior NÃO veio no sentido norte, oeste ou noroeste, se está na mesma faixa e se respeita a ordem de prioridade*/
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x+1]=0 and (v1x+1 < xf-f+1 and v1y+1 < yf) and a[v1y+1][v1x] <> 0 and (i <> 2 or i <> 4 or i <> 5) and (d = 0 or d = 4 or out4 =1);
            a[v1y+1][v1x+1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x+1; i:=8; d:=1;
            to move
      [] on a[v3y][v3x]=4 and a[v3y+1][v3x+1]=0 and (v3x+1 < xf-f+1 and v3y+1 < yf) and a[v3y+1][v3x] <> 0 and (j <> 2 or j <> 4 or j <> 5) and (d = 2 or out2 = 1);
            a[v3y+1][v3x+1]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; v3x:=v3x+1; j:=8; d:=3;
            to move
     /* ----------------------------------------- PISTA B----------------------------------------*/
     
         
     /* Carros na pista B se movem a leste se x+1 está vazio e se movimento anterior foi no sentido leste, nordeste ou sudeste, e se respeita a ordem de prioridade, e se está ao longo da sua pista*/
      [] on a[v2y][v2x]=3 and a[v2y][v2x+1]=0 and v2x+1 < xf and (k = 0 or k = 1 or k = 6 or k = 8) and (d = 1 or out1 = 1);
            a[v2y][v2x+1]:=3; a[v2y][v2x]:=0; v2x:=v2x+1; k:=1; d:=2;
            to move
      
      [] on a[v4y][v4x]=5 and a[v4y][v4x+1]=0 and v4x+1 < xf and (l = 0 or l = 1 or l = 6 or l = 8) and (d = 3 or out3 = 1);
            a[v4y][v4x+1]:=5; a[v4y][v4x]:=0; v4x:=v4x+1; l:=1; d:=4;
            to move 
         

     /* Carros na pista B se movem a nordeste se [y-1][x+1] está vazio e se movimento anterior NÃO vem no sentido sul, oeste ou sudoeste, se respeita a ordem de prioridade, e se está na interseção ou passou dela */
      [] on a[v2y][v2x]=3 and a[v2y-1][v2x+1]=0 and (v2y-1 > f-1 and v2x+1 < xf) and (k <> 2 or k <> 3 or k <> 7) and (d = 1 or out1 = 1);
            a[v2y-1][v2x+1]:=3; a[v2y][v2x]:=0; v2y:=v2y-1; v2x:=v2x+1; k:=6; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y-1][v4x+1]=0 and (v4y-1 > f-1 and v4x+1 < xf) and (l <> 2 or l <> 3 or l <> 7) and (d = 3 or out3 = 1);
            a[v4y-1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y-1; v4x:=v4x+1; l:=6; d:=4;
            to move    

     
     /* Carros na pista B se movem a sudeste se [y+1][x+1] está vazio e se movimento anterior NÃO veio do sul, leste ou sudeste, se está na mesma faixa e se respeita a ordem de prioridade */
      [] on a[v2y][v2x]=3 and a[v2y+1][v2x+1]=0 and (v2y+1 < yf-f+1 and v2x+1 < xf) and (k <> 1 or k <> 3 or k <> 8) and (d = 1 or out1 = 1);
            a[v2y+1][v2x+1]:=3; a[v2y][v2x]:=0; v2y:=v2y+1; v2x:=v2x+1; k:=8; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y+1][v4x+1]=0 and (v4y+1 < yf-f+1 and v4x+1 < xf) and (l <> 1 or l <> 3 or l <> 8) and (d = 3 or out3 = 1);
            a[v4y+1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y+1; v4x:=v4x+1; l:=8; d:=4;
            to move     
      end
  


/* Ponto de entrada
*/

play


/* Propriedades */


/* não alcança o alvo (target) quando o estado é done*/
property not_target is ltl ([] not (play/state done)) 
assert not_target



