/* Cruzamento 04 veículos
 0 = slot com rua, 1 = slot com calçada, <>1 = slot com carro
*/

/* Constantes */
const xf : nat is 7 /* indice final em x das matrizes do grid */
const yf : nat is 7 /* indice final em y das matrizes do grid */
const f  : nat is 2 /*tamanho da calçada*/
const p  : nat is 4 /*número de pistas*/


/* Processo: os carros podem ir para frente e pra trás,
para as diagonais esquerda e direita, mas com restrições. A preferência é que andem dois slots se possível */

process play is
   states move, done
       
    var d : 0..4  := 0,  /* Token d indica qual carro teve a chance de se movimentar por ultimo 
          
        0 = estado inicial, 1, 2, 3 e 4 são vinculados em ordem de prioridade. Por exemplo: 1 =
        carro mais perto da interseção, independente da pista. 4 = carro mais afastado
        
        Ordem de prioridade para ter a propriedade de starvation-free: carro d = 1 só se movimenta depois que o carro d = 4 já andou ou se é o primeiro movimento do grid de controle, carro d = 2 só se movimenta depois que o carro d = 1 já andou, carro d = 3 só se movimenta depois que o carro d = 2 já andou, carro d = 4 só se movimenta depois que o carro d = 3 já andou.
        Neste modelo, as ordens foram definidas manualmente, futuramente se adicionará uma seleção condicional.*/
       
        out1, out2, out3, out4 : 0..1 :=0,  /* 1 indica que o carro em questão saiu do grid*/

       /* tokens i, j, k e l atualizam quandos os veículos fazem um movimento*/
       /* 0 = estado inicial;
          1 = quando anda no sentido leste (x+);
          2 = quando anda no sentido oeste (x-); 
          3 = quando anda no sentido sul   (y+);
          4 = quando anda no sentido norte (y-);
          5 = quando anda na diagonal sentido noroeste;
          6 = quando anda na diagonal sentido nordeste; 
          7 = quando anda na diagonal sentido sudoeste;
          8 = quando anda na diagonal sentido sudeste*/
       
       
       i : 0..8   := 0, /* carro 1 na pista A*/
       j : 0..8   := 0, /* carro 2 na pista A*/ 
       k : 0..8   := 0, /* carro 1 na pista B*/
       l : 0..8   := 0, /* carro 2 na pista B*/
       
       
       v1x  : 0..xf :=2, /* coordenada horizontal carro 1 na pista A*/
       v1y  : 0..yf :=1, /* coordenada vertical carro 1 na pista A*/
       v2x  : 0..xf :=1, /* coordenada horizontal carro 1 na pista B*/
       v2y  : 0..yf :=2, /* coordenada vertical carro 1 na pista B*/
       v3x  : 0..xf :=5, /* coordenada horizontal carro 2 na pista A*/
       v3y  : 0..yf :=0, /* coordenada vertical carro 2 na pista A*/
       v4x  : 0..xf :=0, /* coordenada horizontal carro 2 na pista B*/
       v4y  : 0..yf :=4, /* coordenada vertical carro 2 na pista B*/
       
                                                 /* A */
       a : array 8 of array 8 of nat :=    [[1,1,0,0,0,4,1,1],
                                            [1,1,2,0,0,0,1,1],
                           /* B */          [0,3,0,0,0,0,0,0],
                                            [0,0,0,0,0,0,0,0],
                                            [5,0,0,0,0,0,0,0],
                                            [0,0,0,0,0,0,0,0],
                                            [1,1,0,0,0,0,1,1], 
                                            [1,1,0,0,0,0,1,1]]
    
      from move
      select /* Todos os carros fora do grid*/
         on out1 = 1 and out2 = 1 and out3 = 1 and out4 = 1;
         to done
         
         /* Destinos onde carros na borda podem sair do grid - Sem convergência de pista*/

      [] on a[v1y][v1x] = 2 and v1y = yf-1 and (v1x = xf - f - p + 1 or v1x = xf - f - p + 2 or v1x = xf - f - p + 3 or v1x = xf - f - p + 4);
            a[v1y][v1x] := 0; out1:=1; to move
      [] on a[v3y][v3x] = 4 and v3y = yf-1 and (v3x = xf - f - p + 1 or v3x = xf - f - p + 2 or v3x = xf - f - p + 3 or v3x = xf - f - p + 4);
            a[v3y][v3x] := 0; out3:=1; to move
      [] on a[v2y][v2x] = 3 and v2x = xf-1 and (v2y = yf - f - p + 1 or v2y = yf - f - p + 2 or v2y = yf - f - p + 3 or v2y = yf - f - p + 4);
            a[v2y][v2x] := 0; out2:=1; to move
      [] on a[v4y][v4x] = 5 and v4x = xf-1 and (v4y = yf - f - p + 1 or v4y = yf - f - p + 2 or v4y = yf - f - p + 3 or v4y = yf - f - p + 4);
            a[v4y][v4x] := 0; out4:=1; to move
      
              
      /* Movimentos*/
      
      /* -----------------------------------EVITA DEADLOCK----------------------------------------
      /* Quando os carros não tem opção de movimento eles aguardam e dão a vez ao próximo*/      
      
      [] on 

         ((a[v3y][v3x] = 4 and a[v3y+1][v3x] <> 0 and ((a[v3y+1][v3x+1] <> 0 and a[v3y+1][v3x-1] <> 0) or (v3x+1 > 6 or v3x-1 < 3)) and d = 2 and v3y < 9) and ((a[v2y][v2x] = 3 and a[v2y][v2x+1] = 0 and v2x <8)
          or (a[v4y][v4x] = 5 and a[v4y][v4x+1] = 0 and v4x <8)))
         
         or ((a[v2y][v2x] = 3 and a[v2y][v2x+1] <> 0 and ((a[v2y+1][v2x+1] <> 0 and a[v2y-1][v2x+1] <> 0) or (v2y+1 > 6 or v2y-1 < 3)) and d = 1 and v2x < 9) and ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <8) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <8)))
         
         or ((a[v4y][v4x] = 5 and a[v4y][v4x+1] <> 0 and ((a[v4y+1][v4x+1] <> 0 and a[v4y-1][v4x+1] <> 0) or (v4y+1 > 6 or v4y-1 < 3)) and d = 3 and v4x < 9) and ((a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y <8) 
          or (a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y <8)))
/*
         or ((a[v1y][v1x] = 2 and a[v1y+1][v1x] <> 0 and ((a[v1y+1][v1x+1] <> 0 and a[v1y+1][v1x-1] <> 0) or (v1x+1 > 6 or v1x-1 < 3)) and d = 4 and v3y < 9) and ((a[v2y][v2x] = 3 and a[v2y][v2x+1] = 0 and v2x <8)
         or (a[v4y][v4x] = 5 and a[v4y][v4x+1] = 0 and v4x <8)))*/
         ; 

         d:=d+1;
         to move  */ 
     /* ----------------------------------------- PISTA A----------------------------------------*/ 
     /* Carros na pista A se movem ao sul se y+1 ou y+2 está vazio e se movimento anterior foi no sentido sul, sudeste ou sudoeste, e se respeita a ordem de prioridade, e se está ao longo da sua pista*/
      [] on a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y+1 < yf and (i = 0 or i = 3 or i = 7 or i = 8) and (d = 0 or d = 4 or out4 = 1);
            a[v1y+1][v1x]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; i:=3; d:=1;
            to move
      [] on a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y+2 < yf and (i = 0 or i = 3 or i = 7 or i = 8) and (d = 0 or d = 4 or out4 = 1);
            a[v1y+2][v1x]:=2; a[v1y][v1x]:=0; v1y:=v1y+2; i:=3; d:=1;
            to move 


      [] on a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y+1 < yf and (j = 0 or j = 3 or j = 7 or j = 8) and (d = 2 or out2 = 1);
            a[v3y+1][v3x]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; j:=3; d:=3;
            to move 
      [] on a[v3y][v3x] = 4 and a[v3y+1][v3x] = 0 and v3y+2 < yf and (j = 0 or j = 3 or j = 7 or j = 8) and (d = 2 or out2 = 1);
            a[v3y+2][v3x]:=4; a[v3y][v3x]:=0; v3y:=v3y+2; j:=3; d:=3;
            to move  

          
     /* Carros na pista A se movem a sudoeste se [y+1][x-1] está vazio e se movimento anterior NÃO vem no sentido norte, leste ou nordeste, se está na mesma faixa e se respeita a ordem de prioridade*/
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x-1]=0 and (v1x-1 > f-1 and v1y+1 < yf) and (i <> 1 or i <> 4 or i <> 6) and (d = 0 or d = 4 or out4 = 1);
            a[v1y+1][v1x-1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x-1; i:=7; d:=1;
            to move
      [] on a[v3y][v3x]=4 and a[v3y+1][v3x-1]=0 and (v3x-1 > f-1 and v3y+1 < yf) and (j <> 1 or j <> 4 or j <> 6) and (d = 2 or out2 = 1);
            a[v3y+1][v3x-1]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; v3x:=v3x-1; j:=7; d:=3;
            to move

     /* Carros na pista A se movem a sudeste se [y+1][x+1] está vazio e se movimento anterior NÃO veio no sentido norte, oeste ou noroeste, se está na mesma faixa e se respeita a ordem de prioridade*/
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x+1]=0 and (v1x+1 < xf-f+1 and v1y+1 < yf) and a[v1y+1][v1x] <> 0 and (i <> 2 or i <> 4 or i <> 5) and (d = 0 or d = 4 or out4 =1);
            a[v1y+1][v1x+1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x+1; i:=8; d:=1;
            to move
      [] on a[v3y][v3x]=4 and a[v3y+1][v3x+1]=0 and (v3x+1 < xf-f+1 and v3y+1 < yf) and a[v3y+1][v3x] <> 0 and (j <> 2 or j <> 4 or j <> 5) and (d = 2 or out2 = 1);
            a[v3y+1][v3x+1]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; v3x:=v3x+1; j:=8; d:=3;
            to move
     /* ----------------------------------------- PISTA B----------------------------------------*/
     
         
     /* Carros na pista B se movem a leste se x+1 está vazio e se movimento anterior foi no sentido leste, nordeste ou sudeste, e se respeita a ordem de prioridade, e se está ao longo da sua pista*/
      [] on a[v2y][v2x]=3 and a[v2y][v2x+1]=0 and v2x+1 < xf and (k = 0 or k = 1 or k = 6 or k = 8) and (d = 1 or out1 = 1);
            a[v2y][v2x+1]:=3; a[v2y][v2x]:=0; v2x:=v2x+1; k:=1; d:=2;
            to move
      [] on a[v2y][v2x]=3 and a[v2y][v2x+1]=0 and v2x+2 < xf and (k = 0 or k = 1 or k = 6 or k = 8) and (d = 1 or out1 = 1);
            a[v2y][v2x+2]:=3; a[v2y][v2x]:=0; v2x:=v2x+2; k:=1; d:=2;
            to move

      [] on a[v4y][v4x]=5 and a[v4y][v4x+1]=0 and v4x+1 < xf and (l = 0 or l = 1 or l = 6 or l = 8) and (d = 3 or out3 = 1);
            a[v4y][v4x+1]:=5; a[v4y][v4x]:=0; v4x:=v4x+1; l:=1; d:=4;
            to move 
      [] on a[v4y][v4x]=5 and a[v4y][v4x+1]=0 and v4x+2 < xf and (l = 0 or l = 1 or l = 6 or l = 8) and (d = 3 or out3 = 1);
            a[v4y][v4x+2]:=5; a[v4y][v4x]:=0; v4x:=v4x+2; l:=1; d:=4;
            to move       

     /* Carros na pista B se movem a nordeste se [y-1][x+1] está vazio e se movimento anterior NÃO vem no sentido sul, oeste ou sudoeste, se respeita a ordem de prioridade, e se está na interseção ou passou dela */
      [] on a[v2y][v2x]=3 and a[v2y-1][v2x+1]=0 and (v2y-1 > f-1 and v2x+1 < xf) and (k <> 2 or k <> 3 or k <> 7) and (d = 1 or out1 = 1);
            a[v2y-1][v2x+1]:=3; a[v2y][v2x]:=0; v2y:=v2y-1; v2x:=v2x+1; k:=6; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y-1][v4x+1]=0 and (v4y-1 > f-1 and v4x+1 < xf) and (l <> 2 or l <> 3 or l <> 7) and (d = 3 or out3 = 1);
            a[v4y-1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y-1; v4x:=v4x+1; l:=6; d:=4;
            to move    

     
     /* Carros na pista B se movem a sudeste se [y+1][x+1] está vazio e se movimento anterior NÃO veio do sul, leste ou sudeste, se está na mesma faixa e se respeita a ordem de prioridade */
      [] on a[v2y][v2x]=3 and a[v2y+1][v2x+1]=0 and (v2y+1 < yf-f+1 and v2x+1 < xf) and (k <> 1 or k <> 3 or k <> 8) and (d = 1 or out1 = 1);
            a[v2y+1][v2x+1]:=3; a[v2y][v2x]:=0; v2y:=v2y+1; v2x:=v2x+1; k:=8; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y+1][v4x+1]=0 and (v4y+1 < yf-f+1 and v4x+1 < xf) and (l <> 1 or l <> 3 or l <> 8) and (d = 3 or out3 = 1);
            a[v4y+1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y+1; v4x:=v4x+1; l:=8; d:=4;
            to move     
      end
  


/* Ponto de entrada
*/

play


/* Propriedades */


/* não alcança o alvo (target) quando o estado é done*/
property not_target is ltl ([] not (play/state done)) 
assert not_target



