/* Cruzamento 04 veículos
 0 = célula com rua livre, 1 = célula com calçada, <>1 = célula com carro
*/

/* Constantes */
const xf : nat is 7 /* índice final em x na matriz a */
const yf : nat is 7 /* índice final em y na matriz a */
const c  : nat is 2 /* tamanho da calçada = largura ocupada pelo número 1 na matriz a */
const n  : nat is 8 /* número de carros no grid */

/* Tipos de variáveis que definem o alcançe das posições (y,x)*/
type posY is 0..yf
type posX is 0..xf 

/* Processo: Um carro "n" em linha reta pode andar para frente no mesmo sentido em que está ou fazer movimentos na diagonal. Um carro "n" em um movimento na diagonal pode se movimentar para qualquer célula, exceto retornar para a célula anterior, ou fazer um movimento brusco em +135° ou -135°

Os carros também podem andar duas células para frente se possível */

process play is
   states move, done
       
    var 
        /* Token "d" indica qual carro teve a chance de se movimentar por ultimo na rodada.
        Uma rodada acaba quando todos os carros tiveram a chance de se movimentar.
          
        0 = estado inicial, 1 .. n são vinculados em ordem de prioridade. Por exemplo: 1 =
        primeiro carro a se movimentar em uma rodada, n = último carro a se movimentar em uma rodada
        
        Essa ordem é implementada para o sistema ter a propriedade de starvation-free: o primeiro carro (d = 1) se movimentar se é o primeiro movimento do grid de controle (d = 0) ou após o último carro (d = n) andar, o segundo carro (d = 2) só se movimenta depois que o primeiro carro (d = 1) já andou e assim por diante.
        Neste modelo, as ordens foram definidas manualmente, futuramente será adicionado uma seleção condicional.*/
        
        d : 0..n  := 0, 
        
        /* o token "out(n)" é binário: 
          true  = carro n saiu do grid
          false = carro n ainda está no grid*/

        out1, out2, out3, out4, out5, out6, out7, out8 : bool := false,  

       /* o token "i(n)"" atualiza quando o veículo "n" faz um movimento*/
       /* 0 = estado inicial;
          1 = quando anda no sentido leste (x+);           noroeste  norte  nordeste            
          2 = quando anda no sentido oeste (x-);                   \   ^   /
          3 = quando anda no sentido sul   (y+);                    [0,0,0]    
          4 = quando anda no sentido norte (y-);            oeste < [0,n,0] > leste
          5 = quando anda na diagonal noroeste (y-,x-);             [0,0,0]
          6 = quando anda na diagonal nordeste (y-,x+);            /   v   \           
          7 = quando anda na diagonal sudoeste (y+,x-);    sudoeste   sul   sudeste
          8 = quando anda na diagonal sudeste  (y+,x+)*/
       
       i1, i2, i3, i4, i5, i6, i7, i8 : 0..8   := 0, 
               
       
       /* Posições (y,x) iniciais de cada carro */
       v1y  : posY :=1, v1x  : posX :=2, /* número 2 no grid */
       v2y  : posY :=0, v2x  : posX :=5, /* número 3 no grid */
       v3y  : posY :=2, v3x  : posX :=1, /* número 4 no grid */
       v4y  : posY :=4, v4x  : posX :=0, /* número 5 no grid */
       v5y  : posY :=4, v5x  : posX :=6, /* número 6 no grid */
       v6y  : posY :=2, v6x  : posX :=7, /* número 7 no grid */
       v7y  : posY :=6, v7x  : posX :=4, /* número 8 no grid */
       v8y  : posY :=7, v8x  : posX :=3, /* número 9 no grid */

       /* Destinos/Targets = A, B, C, D - Sem convergência de pista*/
       tAy : nat:= yf-6, tAx : nat:=  c-1, 
       tBy : nat:=  c-1, tBx : nat:= xf-6,
       tCy : nat:=  c-1, tCx : nat:= xf-1,
       tDy : nat:= yf-1, tDx : nat:=  c-1,
       
                                      /* x-> 0-1-2-3-4-5-6-7*/
                                                 /* A */                /*y*/
       a : array 8 of array 8 of nat :=    [[1,1,0,0,0,3,1,1],          /*0*/
                                            [1,1,2,0,0,0,1,1],          /*1*/
                                            [0,4,0,0,0,0,0,7],          /*2*/ 
                                    /* B */ [0,0,0,0,0,0,0,0], /* C */  /*3*/
                                            [5,0,0,0,0,0,6,0],          /*4*/
                                            [0,0,0,0,0,0,0,0],          /*5*/
                                            [1,1,0,0,8,0,1,1],          /*6*/
                                            [1,1,0,9,0,0,1,1]]          /*7*/
                                                 /* D */ 
     
      from move
      select /* Todos os carros fora do grid*/
         on out1 = true and out2 = true and out3 = true and out4 = true and 
            out5 = true and out6 = true and out7 = true and out8 = true;
         to done /* Estado final */
          
      /* Carros em A chegam em D*/
      [] on a[v1y][v1x] = 2 and v1y = tDy and (v1x = tDx + 1 or v1x = tDx + 2 or v1x = tDx + 3 or v1x = tDx + 4);
            a[v1y][v1x] := 0; out1:=true; to move
      [] on a[v2y][v2x] = 3 and v2y = tDy and (v2x = tDx + 1 or v2x = tDx + 2 or v2x = tDx + 3 or v2x = tDx + 4);
            a[v2y][v2x] := 0; out5:=true; to move

      /* Carros em B chegam em C*/     
      [] on a[v3y][v3x] = 4 and v3x = tCx and (v3y = tCy + 1 or v2y = tCy + 2 or v2y = tCy + 3 or v2y = tCy + 4);
            a[v3y][v3x] := 0; out2:=true; to move
      [] on a[v4y][v4x] = 5 and v4x = tCx and (v4y = tCy + 1 or v4y = tCy + 2 or v4y = tCy + 3 or v4y = tCy + 4);
            a[v4y][v4x] := 0; out6:=true; to move

      /* Carros em D chegam em A*/
      [] on a[v7y][v7x] = 8 and v7y = tAy and (v7x = tAx + 1 or v7x = tAx + 2 or v7x = tAx + 3 or v7x = tAx + 4);
            a[v7y][v7x] := 0; out3:=true; to move
      [] on a[v8y][v8x] = 9 and v8y = tAy and (v8x = tAx + 1 or v8x = tAx + 2 or v8x = tAx + 3 or v8x = tAx + 4);
            a[v8y][v8x] := 0; out7:=true; to move

      /* Carros em C chegam em B*/     
      [] on a[v5y][v5x] = 6 and v5x = tBx and (v5y = tBy + 1 or v5y = tBy + 2 or v5y = tBy + 3 or v5y = tBy + 4);
            a[v5y][v5x] := 0; out4:=true; to move
      [] on a[v6y][v6x] = 7 and v6x = tBx and (v6y = tBy + 1 or v6y = tBy + 2 or v6y = tBy + 3 or v6y = tBy + 4);
            a[v6y][v6x] := 0; out8:=true; to move
            
                 
     /* ----------------------------------CARROS EM A-----------------------------------*/ 
     /* Se movem ao sul se y+1 ou y+2 estão vazios e se movimento anterior foi no sentido sul, sudeste ou sudoeste, e se respeita a propriedade starvation-free*/
      [] on a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y+1 < yf and (i1 = 0 or i1 = 3 or i1 = 7 or i1 = 8) and (d = 0 or d = 8);
            a[v1y+1][v1x]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; i1:=3; d:=1;
            to move
      [] on a[v1y][v1x] = 2 and a[v1y+1][v1x] = 0 and v1y+2 < yf and (i1 = 0 or i1 = 3 or i1 = 7 or i1 = 8) and (d = 0 or d = 8);
            a[v1y+2][v1x]:=2; a[v1y][v1x]:=0; v1y:=v1y+2; i1:=3; d:=1;
            to move 

      [] on a[v2y][v2x] = 3 and a[v2y+1][v2x] = 0 and v2y+1 < yf and (i2 = 0 or i2 = 3 or i2 = 7 or i2 = 8) and (d = 4 or out4 = true);
            a[v2y+1][v2x]:=4; a[v2y][v2x]:=0; v2y:=v2y+1; i2:=3; d:=5;
            to move 
      [] on a[v2y][v2x] = 3 and a[v3y+1][v3x] = 0 and v3y+2 < yf and (i2 = 0 or i2 = 3 or i2 = 7 or i2 = 8) and (d = 4 or out4 = true);
            a[v2y+2][v2x]:=4; a[v2y][v2x]:=0; v2y:=v2y+2; i2:=3; d:=5;
            to move  
      
     /* Se movem a sudoeste se [y+1][x-1] está vazio e se movimento anterior NÃO vem no sentido norte, leste ou nordeste, e se respeita a propriedade de starvation-free*/
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x-1]=0 and (v1x-1 > c-1 and v1y+1 < yf) and (i1 <> 1 or i1 <> 4 or i1 <> 6) and (d = 0 or d = 8 or out8 = true);
            a[v1y+1][v1x-1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x-1; i1:=7; d:=1;
            to move
      [] on a[v2y][v2x]=3 and a[v2y+1][v2x-1]=0 and (v2x-1 > c-1 and v2y+1 < yf) and (i2 <> 1 or i2 <> 4 or i2 <> 6) and (d = 4 or out4 = true);
            a[v2y+1][v2x-1]:=3; a[v2y][v2x]:=0; v2y:=v2y+1; v2x:=v2x-1; i2:=7; d:=5;
            to move

     /* Se movem a sudeste se [y+1][x+1] está vazio e se movimento anterior NÃO veio no sentido norte, oeste ou noroeste, e se respeita a propriedade de starvation-free*/
      [] on a[v1y][v1x]=2 and a[v1y+1][v1x+1]=0 and (v1x+1 < xf-c+1 and v1y+1 < yf) and (i1 <> 2 or i1 <> 4 or i1 <> 5) and (d = 0 or d = 8 or out8 =true);
            a[v1y+1][v1x+1]:=2; a[v1y][v1x]:=0; v1y:=v1y+1; v1x:=v1x+1; i1:=8; d:=1;
            to move
      [] on a[v2y][v2x]=3 and a[v2y+1][v2x+1]=0 and (v2x+1 < xf-c+1 and v2y+1 < yf) and (i2 <> 2 or i2 <> 4 or i2 <> 5) and (d = 4 or out4 = true);
            a[v2y+1][v2x+1]:=3; a[v2y][v2x]:=0; v2y:=v2y+1; v2x:=v2x+1; i2:=8; d:=5;
            to move

     /* ----------------------------------CARROS EM B-----------------------------------*/
     /* Se movem a leste se [x+1] está vazio e se movimento anterior foi no sentido leste, nordeste ou sudeste, e se respeita a propriedade de starvation-free*/
      [] on a[v3y][v3x]=4 and a[v3y][v3x+1]=0 and v3x+1< xf and (i3 = 0 or i3 = 1 or i3 = 6 or i3 = 8) and (d = 1 or out1 = true);
            a[v3y][v3x+1]:=4; a[v3y][v3x]:=0; v3x:=v3x+1; i3:=1; d:=2;
            to move
      [] on a[v3y][v3x]=4 and a[v3y][v3x+1]=0 and v3x+2 < xf and (i3 = 0 or i3 = 1 or i3 = 6 or i3 = 8) and (d = 1 or out1 = true);
            a[v3y][v3x+2]:=4; a[v3y][v3x]:=0; v3x:=v3x+2; i3:=1; d:=2;
            to move

      [] on a[v4y][v4x]=5 and a[v4y][v4x+1]=0 and v4x+1 < xf and (i4 = 0 or i4 = 1 or i4 = 6 or i4 = 8) and (d = 5 or out5 = true);
            a[v4y][v4x+1]:=5; a[v4y][v4x]:=0; v4x:=v4x+1; i4:=1; d:=6;
            to move 
      [] on a[v4y][v4x]=5 and a[v4y][v4x+1]=0 and v4x+2 < xf and (i4 = 0 or i4 = 1 or i4 = 6 or i4 = 8) and (d = 5 or out5 = true);
            a[v4y][v4x+2]:=5; a[v4y][v4x]:=0; v4x:=v4x+2; i4:=1; d:=6;
            to move       

     /* Se movem a nordeste se [y-1][x+1] está vazio e se movimento anterior NÃO vem no sentido sul, oeste ou sudoeste, se respeita a propriedade de starvation-free */
      [] on a[v3y][v3x]=4 and a[v3y-1][v3x+1]=0 and (v3y-1 > c-1 and v3x+1 < xf) and (i3 <> 2 or i3 <> 3 or i3 <> 7) and (d = 1 or out1 = true);
            a[v3y-1][v3x+1]:=4; a[v3y][v3x]:=0; v3y:=v3y-1; v3x:=v3x+1; i3:=6; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y-1][v4x+1]=0 and (v4y-1 > c-1 and v4x+1 < xf) and (i4 <> 2 or i4 <> 3 or i4 <> 7) and (d = 5 or out5 = true);
            a[v4y-1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y-1; v4x:=v4x+1; i4:=6; d:=6;
            to move    
     
     /* Se movem a sudeste se [y+1][x+1] está vazio e se movimento anterior NÃO veio do sul, leste ou sudeste, se respeita a propriedade de starvation-free */
      [] on a[v3y][v3x]=4 and a[v3y+1][v3x+1]=0 and (v3y+1 < yf-c+1 and v3x+1 < xf) and (i3 <> 1 or i3 <> 3 or i3 <> 8) and (d = 1 or out1 = true);
            a[v3y+1][v3x+1]:=4; a[v3y][v3x]:=0; v3y:=v3y+1; v3x:=v3x+1; i3:=8; d:=2;
            to move
      [] on a[v4y][v4x]=5 and a[v4y+1][v4x+1]=0 and (v4y+1 < yf-c+1 and v4x+1 < xf) and (i4 <> 1 or i4 <> 3 or i4 <> 8) and (d = 5 or out5 = true);
            a[v4y+1][v4x+1]:=5; a[v4y][v4x]:=0; v4y:=v4y+1; v4x:=v4x+1; i4:=8; d:=6;
            to move 

     /* ----------------------------------CARROS EM C-----------------------------------*/
     /* Se movem a oeste se [x-1] está vazio e se movimento anterior foi no sentido oeste, noroeste ou sudoeste, e se respeita a propriedade de starvation-free*/
      [] on a[v5y][v5x]=6 and a[v5y][v5x-1]=0 and v5x-1 > 0 and (i5 = 0 or i5 = 2 or i5 = 5 or i5 = 7) and (d = 2 or out2 = true);
            a[v5y][v5x-1]:=6; a[v5y][v5x]:=0; v5x:=v5x-1; i5:=2; d:=3;
            to move
      [] on a[v5y][v5x]=6 and a[v5y][v5x-1]=0 and v5x-2 > 0 and (i5 = 0 or i5 = 2 or i5 = 5 or i5 = 7) and (d = 2 or out2 = true);
            a[v5y][v5x-2]:=6; a[v5y][v5x]:=0; v5x:=v5x-2; i5:=2; d:=3;
            to move

      [] on a[v6y][v6x]=7 and a[v6y][v6x-1]=0 and v6x-1 > 0 and (i6 = 0 or i6 = 2 or i6 = 5 or i6 = 7) and (d = 6 or out6 = true);
            a[v6y][v6x-1]:=7; a[v6y][v6x]:=0; v6x:=v6x-1; i5:=2; d:=7;
            to move
      [] on a[v6y][v6x]=7 and a[v6y][v6x-1]=0 and v6x-2 > 0 and (i6 = 0 or i6 = 2 or i6 = 5 or i6 = 7) and (d = 6 or out6 = true);
            a[v6y][v6x-1]:=7; a[v6y][v6x]:=0; v6x:=v6x-2; i5:=2; d:=7;
            to move      

     /* Se movem a noroeste se [y-1][x-1] está vazio e se movimento anterior NÃO vem no sentido norte, leste ou sudeste, se respeita a propriedade de starvation-free */
      [] on a[v5y][v5x]=6 and a[v5y-1][v5x-1]=0 and (v5y-1 > c-1 and v5x-1 > 0) and (i5 <> 1 or i5 <> 4 or i5 <> 8) and (d = 2 or out2 = true);
            a[v5y-1][v5x-1]:=6; a[v5y][v5x]:=0; v5y:=v5y-1; v5x:=v5x-1; i5:=5; d:=3;
            to move
      [] on a[v6y][v6x]=7 and a[v6y-1][v6x-1]=0 and (v6y-1 > c-1 and v6x-1 > 0) and (i6 <> 1 or i6 <> 4 or i6 <> 8) and (d = 6 or out6 = true);
            a[v6y-1][v6x-1]:=7; a[v6y][v6x]:=0; v6y:=v6y-1; v6x:=v6x-1; i6:=5; d:=7;
            to move    
     
     /* Se movem a sudoeste se [y+1][x-1] está vazio e se movimento anterior NÃO veio do norte, oeste ou nordeste, se respeita a propriedade de starvation-free */
      [] on a[v5y][v5x]=6 and a[v5y+1][v5x-1]=0 and (v5y+1 < yf-c+1 and v5x+1 > 0) and (i5 <> 2 or i5 <> 4 or i5 <> 6) and (d = 2 or out2 = true);
            a[v5y+1][v5x-1]:=6; a[v5y][v5x]:=0; v5y:=v5y+1; v5x:=v5x-1; i5:=7; d:=3;
            to move
      [] on a[v6y][v6x]=7 and a[v6y+1][v6x-1]=0 and (v6y+1 < yf-c+1 and v6x+1 > 0) and (i6 <> 2 or i6 <> 4 or i6 <> 6) and (d = 6 or out6 = true);
            a[v6y+1][v6x-1]:=7; a[v6y][v6x]:=0; v6y:=v6y+1; v6x:=v6x-1; i6:=7; d:=7;
            to move

     /* ----------------------------------CARROS EM D-----------------------------------*/ 
     /* Se movem ao norte se y-1 ou y-2 estão vazios e se movimento anterior foi no sentido norte nordeste ou noroeste, e se respeita a propriedade starvation-free*/
      [] on a[v7y][v7x] = 8 and a[v7y-1][v7x] = 0 and v7y-1 > 0 and (i7 = 0 or i7 = 4 or i7 = 5 or i7 = 6) and (d = 3 or out3 = true);
            a[v7y-1][v7x]:=8; a[v7y][v7x]:=0; v7y:=v7y-1; i7:=4; d:=4;
            to move
      [] on a[v7y][v7x] = 8 and a[v7y-1][v7x] = 0 and v7y-2 > 0 and (i7 = 0 or i7 = 4 or i7 = 5 or i7 = 6) and (d = 3 or out3 = true);
            a[v7y-2][v7x]:=8; a[v7y][v7x]:=0; v7y:=v7y-2; i7:=4; d:=4;
            to move 

      [] on a[v8y][v8x] = 9 and a[v8y-1][v8x] = 0 and v8y-1 > 0 and (i8 = 0 or i8 = 4 or i8 = 5 or i8 = 6) and (d = 7 or out7 = true);
            a[v8y-1][v8x]:=9; a[v8y][v8x]:=0; v8y:=v8y-1; i8:=4; d:=8;
            to move
      [] on a[v8y][v8x] = 9 and a[v8y-1][v8x] = 0 and v8y-2 > 0 and (i8 = 0 or i8 = 4 or i8 = 5 or i8 = 6) and (d = 7 or out7 = true);
            a[v8y-2][v8x]:=9; a[v8y][v8x]:=0; v8y:=v8y-2; i8:=4; d:=8;
            to move 
      
     /* Se movem a noroeste se [y-1][x-1] está vazio e se movimento anterior NÃO vem no sentido norte, leste ou sudeste, se respeita a propriedade de starvation-free */
      [] on a[v7y][v7x]=8 and a[v7y-1][v7x-1]=0 and (v7y-1 > c-1 and v7x-1 > 0) and (i7 <> 1 or i7 <> 4 or i7 <> 8) and (d = 3 or out3 = true);
            a[v7y-1][v7x-1]:=8; a[v7y][v7x]:=0; v7y:=v7y-1; v7x:=v7x-1; i7:=5; d:=4;
            to move
      [] on a[v8y][v8x]=9 and a[v8y-1][v8x-1]=0 and (v8y-1 > c-1 and v8x-1 > 0) and (i8 <> 1 or i8 <> 4 or i8 <> 8) and (d = 7 or out7 = true);
            a[v8y-1][v8x-1]:=9; a[v8y][v8x]:=0; v8y:=v8y-1; v8x:=v8x-1; i8:=5; d:=8;
            to move
  
     /* Se movem a nordeste se [y-1][x+1] está vazio e se movimento anterior NÃO vem no sentido sul, oeste ou sudoeste, se respeita a propriedade de starvation-free */
      [] on a[v7y][v7x]=8 and a[v7y-1][v7x+1]=0 and (v7y-1 > c-1 and v7x+1 < xf) and (i7 <> 2 or i7 <> 3 or i7 <> 7) and (d = 3 or out3 = true);
            a[v7y-1][v7x+1]:=8; a[v7y][v7x]:=0; v7y:=v7y-1; v7x:=v7x+1; i7:=6; d:=4;
            to move
      [] on a[v8y][v8x]=9 and a[v8y-1][v8x+1]=0 and (v8y-1 > c-1 and v8y-1 < yf and v8x+1 < xf) and (i8 <> 2 or i8 <> 3 or i8 <> 7) and (d = 7 or out7 = true);
            a[v8y-1][v8x+1]:=9; a[v8y][v8x]:=0; v8y:=v8y-1; v8x:=v8x+1; i8:=6; d:=8;
            to move

         
      end
  


/* Ponto de entrada
*/

play


/* Propriedades */


/* não alcança o alvo (target) quando o estado é done*/
property not_target is ltl ([] not (play/state done)) 
assert not_target


